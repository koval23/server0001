Класс Receiver:

Это будет абстрактный класс или интерфейс, который определяет общее поведение для всех получателей сообщений.
Каждый конкретный Receiver (например, Receiver1, Receiver2, Receiver3) будет наследоваться от этого класса и реализовывать конкретные детали получения сообщений от своих клиентов.
В каждом Receiver потребуется метод для чтения сообщений и метод для их передачи в MessageBox.
------------------------------------------------------------------------------------------------
Класс MessageBox:

Этот класс будет управлять хранилищем сообщений.
Внутри MessageBox будет коллекция (например, Queue), которая хранит сообщения.
Будут методы для добавления (push или enqueue) и извлечения (pop или dequeue) сообщений.
------------------------------------------------------------------------------------------------
Класс Sender:

Этот класс будет отвечать за отправку сообщений клиентам.
Он будет извлекать сообщения из MessageBox и отправлять их клиентам.
Возможно, потребуется реализовать механизм определения адресата сообщения,
если сообщения не транслируются всем клиентам, а отправляются конкретным.
------------------------------------------------------------------------------------------------
Класс Server (если потребуется):

Этот класс может служить для координации работы всех Receivers и Sender.
Он может инициализировать и запускать потоки Receiver и Sender, а также обеспечивать их взаимодействие.
------------------------------------------------------------------------------------------------
Класс Client:

Это классы, которые будут использоваться на стороне клиентов, чтобы подключаться к серверу и отправлять/получать сообщения.
Они не являются частью серверной логики, но для полноценного тестирования системы вам нужно будет их реализовать.
------------------------------------------------------------------------------------------------
